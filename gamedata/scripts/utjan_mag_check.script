do_ammo_check_anim = nil
no_mag_check = nil

if ammo_check_mcm then
    base_check_Ammo = ammo_check_mcm.check_Ammo
    function ammo_check_mcm.check_Ammo()
        if ammo_check_mcm.actor_on_hud_animation_play or busy_hands_fix then
            base_check_Ammo()
            return
        end

        local weapon = db.actor:active_item()

        -- ends if no weapon is in hand etc.
        if (weapon == nil or (not IsWeapon(weapon)) or IsItem("fake_ammo_wpn", nil, weapon)) then
            base_check_Ammo()
            return
        end

        local currentState = weapon:get_state()
        if not (currentState == 0 or weapon:weapon_in_grenade_mode()) then
            base_check_Ammo()
            return
        end

        -- if magazine weapon
        local currentAmmo = weapon:get_ammo_in_magazine()
        if (currentAmmo == nil) then
            base_check_Ammo()
            return
        end

        local sec = SYS_GetParam(0, weapon:section(), "parent_section") or weapon:section()
        local anm_ammo_check = SYS_GetParam(0, sec .. "_hud", "anm_ammo_check") 
        if not anm_ammo_check then
            base_check_Ammo()
            return
        end

        if do_ammo_check_anim then return end -- If an ammo check is already happening, don't do anything

        if ammo_check_mcm.busy_hands_fix ~= nil then -- If busy_hands_fix is unlocalized
            local prev_hands_fix = ammo_check_mcm.busy_hands_fix
            ammo_check_mcm.busy_hands_fix = true
            base_check_Ammo()
            ammo_check_mcm.busy_hands_fix = prev_hands_fix
        else -- Else fall back to workaround
            local prev_hands_fix = ui_mcm.get("rax_ammo_check/busy_hands_fix")
            ui_mcm.set("rax_ammo_check/busy_hands_fix", true)
            ammo_check_mcm.on_option_change()
            base_check_Ammo()
            ui_mcm.set("rax_ammo_check/busy_hands_fix", prev_hands_fix)
            ammo_check_mcm.on_option_change()
        end

        local weaponId = weapon:id()
        local mag_data = get_mag_loaded(weaponId)

        if not (is_jammed_weapon(weapon)) and not weapon:weapon_in_grenade_mode() and currentAmmo == 0 then
            if is_supported_weapon(sec) and not mag_data then
                no_mag_check = true
            end
        else
            local max_ammo = 0
            if not mag_data and is_supported_weapon(sec) then
                currentAmmo = 1
                max_ammo = 10
            elseif is_supported_weapon(sec) then
                max_ammo = SYS_GetParam(2, mag_data.section, "max_mag_size")
            else
                max_ammo = SYS_GetParam(2, sec, "ammo_mag_size")
            end
            local curAmmoPerc = currentAmmo / max_ammo

            if not (currentAmmo == max_ammo + 1) and not (curAmmoPerc > 1) and not (currentAmmo == 1 and SYS_GetParam(2, sec, "ammo_mag_size", 0) == 2) then
                if currentAmmo == 1 and not mag_data and is_supported_weapon(sec) then
                    no_mag_check = true
                end
            end
        end

        do_ammo_check_anim = 1
        weapon:switch_state(4)

        CreateTimeEvent("mag_check", "mag_check_reset", 3, function() 
            do_ammo_check_anim = nil
            no_mag_check = nil
            return true
        end) 
    end
end

-- Catch the inspect weapon state switch and do the ammo check animation instead
function actor_on_hud_animation_play(anim_table, obj)
	if not (do_ammo_check_anim == 1 and obj and obj:get_state() == 4) then return end 

    local sec = SYS_GetParam(0, obj:section(), "parent_section") or obj:section()
    local anm_no_mag_check = SYS_GetParam(0, sec .. "_hud", "anm_ammo_check_no_mag")
    local anm_check_empty = SYS_GetParam(0, sec .. "_hud", "anm_ammo_check_empty")

    if no_mag_check and anm_no_mag_check then
        anim_table.anm_name = "anm_ammo_check_no_mag"
        anim_table.anm_speed = parse_list(ini_sys, sec, "anm_ammo_check_no_mag")[3] or anim_table.anm_speed

        local snd_no_mag_check = SYS_GetParam(0, sec ,"snd_ammo_check_no_mag")
        if snd_no_mag_check then
            utils_obj.play_sound(snd_no_mag_check)
        end
    elseif anm_check_empty and obj:get_ammo_in_magazine() == 0 then
        anim_table.anm_name = "anm_ammo_check_empty"
        anim_table.anm_speed = parse_list(ini_sys, sec, "anm_ammo_check_empty")[3] or anim_table.anm_speed

        local snd_ammo_check_empty = SYS_GetParam(0, sec ,"snd_ammo_check_empty")
        if snd_ammo_check_empty then
            utils_obj.play_sound(snd_ammo_check_empty)
        end
    else
        anim_table.anm_name = "anm_ammo_check"
        anim_table.anm_speed = parse_list(ini_sys, sec, "anm_ammo_check")[3] or anim_table.anm_speed

        local snd_ammo_check = SYS_GetParam(0, sec,"snd_ammo_check")
        if snd_ammo_check then
            utils_obj.play_sound(snd_ammo_check)
        end
    end

    do_ammo_check_anim = 2
end

function on_game_start()
    if magazine_binder then
        get_mag_loaded = magazine_binder.get_mag_loaded
        is_supported_weapon = magazine_binder.is_supported_weapon
        is_jammed_weapon = magazines.is_jammed_weapon
    else
        is_supported_weapon = null_function
        get_mag_loaded = null_function
        is_jammed_weapon = null_function
    end

    RegisterScriptCallback("actor_on_hud_animation_play", actor_on_hud_animation_play)
end